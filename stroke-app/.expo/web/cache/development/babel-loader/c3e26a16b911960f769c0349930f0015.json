{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as React from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { Audio } from \"expo-av\";\nimport * as FileSystem from \"expo-file-system\";\nimport getPath from '@flyerhq/react-native-android-uri-path';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      recording = _React$useState2[0],\n      setRecording = _React$useState2[1];\n\n  var _React$useState3 = React.useState(\"\"),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      text = _React$useState4[0],\n      setText = _React$useState4[1];\n\n  function startRecording() {\n    var _await$Audio$Recordin, _recording;\n\n    return _regeneratorRuntime.async(function startRecording$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(Audio.requestPermissionsAsync());\n\n          case 3:\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(Audio.setAudioModeAsync({\n              allowsRecordingIOS: true,\n              playsInSilentModeIOS: true\n            }));\n\n          case 5:\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(Audio.Recording.createAsync({\n              android: {\n                extension: \".mp4\",\n                audioEncoder: Audio.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_DEFAULT,\n                outputFormat: Audio.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_DEFAULT\n              },\n              ios: {\n                extension: \".wav\",\n                sampleRate: 44100,\n                numberOfChannels: 2,\n                bitRate: 128000,\n                audioQuality: Audio.RECORDING_OPTION_IOS_AUDIO_QUALITY_HIGH,\n                outputFormat: Audio.RECORDING_OPTION_IOS_OUTPUT_FORMAT_LINEARPCM\n              }\n            }));\n\n          case 7:\n            _await$Audio$Recordin = _context.sent;\n            _recording = _await$Audio$Recordin.recording;\n            setRecording(_recording);\n            _context.next = 15;\n            break;\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](0);\n            console.error(\"Failed to start recording\", _context.t0);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 12]], Promise);\n  }\n\n  function stopRecording() {\n    var uri, apiUrl, uriParts, fileType, formData, options, path, response, body;\n    return _regeneratorRuntime.async(function stopRecording$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            setRecording(undefined);\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(recording.stopAndUnloadAsync());\n\n          case 3:\n            uri = recording.getURI();\n            _context2.prev = 4;\n            console.log(\"Uploading \" + uri);\n            apiUrl = 'http://192.168.0.32:5000/audio';\n            uriParts = uri.split('.');\n            fileType = uriParts[uriParts.length - 1];\n            formData = new FormData();\n            formData.append('file', {\n              uri: uri,\n              name: \"recording.\" + fileType,\n              type: \"audio/x-\" + fileType\n            });\n            options = {\n              method: 'POST',\n              body: formData,\n              headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'multipart/form-data'\n              }\n            };\n            console.log(\"POSTing \" + uri + \" to \" + apiUrl);\n            path = getPath(recording.getURI());\n            console.log(path);\n            _context2.next = 17;\n            return _regeneratorRuntime.awrap(fetch(apiUrl, options));\n\n          case 17:\n            response = _context2.sent;\n            _context2.next = 20;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 20:\n            body = _context2.sent;\n            setText(body.text);\n            _context2.next = 27;\n            break;\n\n          case 24:\n            _context2.prev = 24;\n            _context2.t0 = _context2[\"catch\"](4);\n            console.error(_context2.t0);\n\n          case 27:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[4, 24]], Promise);\n  }\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Button, {\n      title: recording ? \"Stop Recording\" : \"Start Recording\",\n      onPress: recording ? stopRecording : startRecording\n    }), _jsx(Text, {\n      children: text\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  }\n});","map":{"version":3,"sources":["E:/stroke-app/App.js"],"names":["React","Audio","FileSystem","getPath","App","useState","recording","setRecording","text","setText","startRecording","requestPermissionsAsync","setAudioModeAsync","allowsRecordingIOS","playsInSilentModeIOS","Recording","createAsync","android","extension","audioEncoder","RECORDING_OPTION_ANDROID_AUDIO_ENCODER_DEFAULT","outputFormat","RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_DEFAULT","ios","sampleRate","numberOfChannels","bitRate","audioQuality","RECORDING_OPTION_IOS_AUDIO_QUALITY_HIGH","RECORDING_OPTION_IOS_OUTPUT_FORMAT_LINEARPCM","console","error","stopRecording","undefined","stopAndUnloadAsync","uri","getURI","log","apiUrl","uriParts","split","fileType","length","formData","FormData","append","name","type","options","method","body","headers","path","fetch","response","json","styles","container","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { Text, View, StyleSheet, Button } from \"react-native\";\nimport { Audio } from \"expo-av\";\nimport * as FileSystem from \"expo-file-system\";\nimport getPath from '@flyerhq/react-native-android-uri-path'\n\n//const FLASK_BACKEND = \"http://192.168.0.32:5000/audio\";\n\nexport default function App() {\n  const [recording, setRecording] = React.useState();\n  const [text, setText] = React.useState(\"\");\n\n  async function startRecording() {\n    try {\n      await Audio.requestPermissionsAsync();\n      await Audio.setAudioModeAsync({\n        allowsRecordingIOS: true,\n        playsInSilentModeIOS: true,\n      });\n      const { recording } = await Audio.Recording.createAsync({\n        android: {\n          extension: \".mp4\",\n          audioEncoder: Audio.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_DEFAULT,\n          outputFormat: Audio.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_DEFAULT,\n        },\n        ios: {\n          extension: \".wav\",\n          sampleRate: 44100,\n          numberOfChannels: 2,\n          bitRate: 128000,\n          audioQuality: Audio.RECORDING_OPTION_IOS_AUDIO_QUALITY_HIGH,\n          outputFormat: Audio.RECORDING_OPTION_IOS_OUTPUT_FORMAT_LINEARPCM,\n        },\n      });\n      setRecording(recording);\n    } catch (err) {\n      console.error(\"Failed to start recording\", err);\n    }\n  }\n\n  async function stopRecording() {\n    setRecording(undefined);\n    await recording.stopAndUnloadAsync();\n    const uri = recording.getURI();\n\n    try {\n      console.log(\"Uploading \" + uri);\n      let apiUrl = 'http://192.168.0.32:5000/audio';\n      let uriParts = uri.split('.');\n      let fileType = uriParts[uriParts.length - 1];\n\n      let formData = new FormData();\n      formData.append('file', {\n        uri,\n        name: `recording.${fileType}`,\n        type: `audio/x-${fileType}`,\n      });\n\n      let options = {\n        method: 'POST',\n        body: formData,\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'multipart/form-data',\n        },\n      };\n\n      console.log(\"POSTing \" + uri + \" to \" + apiUrl);\n      //const body = JSON.parse(response.body);\n      //setText(body.text);\n      \n      const path = getPath(recording.getURI());\n      console.log(path);\n      \n      //Send fetch request\n      const response = await fetch(apiUrl, options);\n      //setText to the body of response from fetch\n      const body = await response.json();\n      setText(body.text);\n    } catch (err) {\n      console.error(err);\n    }  \n  }\n\n  return (\n    <View style={styles.container}>\n      <Button\n        title={recording ? \"Stop Recording\" : \"Start Recording\"}\n        onPress={recording ? stopRecording : startRecording}\n      />\n      <Text>{text}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n});"]},"metadata":{},"sourceType":"module"}